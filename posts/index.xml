<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title>所有文章 - 编程日志</title><link>https://mengdemao.github.io/posts/</link><description>所有文章 | 编程日志</description><generator>Hugo -- gohugo.io</generator><language>zh-CN</language><managingEditor>mengdemao19951021@163.com (mengdemao)</managingEditor><webMaster>mengdemao19951021@163.com (mengdemao)</webMaster><copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright><atom:link href="https://mengdemao.github.io/posts/" rel="self" type="application/rss+xml"/><item><title>Nfs</title><link>https://mengdemao.github.io/nfs/</link><pubDate>Mon, 03 May 2021 18:02:48 +0800</pubDate><author><name>mengdemao</name></author><guid>https://mengdemao.github.io/nfs/</guid><description>nfs服务 1 安装 1 sudo apt-get install nfs-kernel-server 2 设置导出 1 /home/exports *(rw,nohide,insecure,no_subtree_check,async,no_root_squash) 3 开启服务 1 sudo /etc/init.d/nfs-kernel-server restart 4 测试 1 2 sudo mount -t nfs -o nolock,vers=3 127.0.0.1:/home/exports /mnt ls /mnt</description></item><item><title>Hugo教程</title><link>https://mengdemao.github.io/hugo/</link><pubDate>Tue, 04 May 2021 22:53:09 +0800</pubDate><author><name>mengdemao</name></author><guid>https://mengdemao.github.io/hugo/</guid><description>1 基本操作 1.1 安装hugo在linux/windows上只能通过直接release下载, 1.2 创建网站 1 hugo new site 路径 1.3 添加主题 将主题直接添加到the</description></item><item><title>antlr教程</title><link>https://mengdemao.github.io/antlr/</link><pubDate>Tue, 04 May 2021 22:53:09 +0800</pubDate><author><name>mengdemao</name></author><guid>https://mengdemao.github.io/antlr/</guid><description>1 简介 ANTLR是一款强大的语法分析器生成工具,用于读取、处理、执行和翻译结构化的文本或二进制文件. 类似于flex/bison,根据描述文件</description></item><item><title>Linux等待队列实现</title><link>https://mengdemao.github.io/wait_queue/</link><pubDate>Tue, 04 May 2021 23:17:55 +0000</pubDate><author><name>mengdemao</name></author><guid>https://mengdemao.github.io/wait_queue/</guid><description>等待事件是建立在调度的基础之上的一种同步机制 使用 1 等待队列头 1 2 3 4 5 struct __wait_queue_head { wq_lock_t lock; struct list_head task_list; }; typedef struct __wait_queue_head wait_queue_head_t; 2 等待队列实体 1 2 3 4 5 6 struct __wait_queue { unsigned int flags; struct task_struct *</description></item><item><title>Page_allocator</title><link>https://mengdemao.github.io/page_allocator/</link><pubDate>Sun, 09 May 2021 16:03:16 +0800</pubDate><author><name>mengdemao</name></author><guid>https://mengdemao.github.io/page_allocator/</guid><description>页面分配器核心函数: __alloc_pages_nodemask gfp_mask : 分配掩码 order : 分配阶数 preferred_nid nodemask 1 核心函数 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40</description></item><item><title>LuaJIT</title><link>https://mengdemao.github.io/luajit/</link><pubDate>Sat, 04 Sep 2021 19:04:52 +0800</pubDate><author><name>mengdemao</name></author><guid>https://mengdemao.github.io/luajit/</guid><description>LuaJIT 1 Lua语法 1.1 基本语法 1 print(&amp;#34;Hello World&amp;#34;) 1.2 表(table) 2 LuaJIT分析 2.1 LuaJIT主函数 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 int main(int argc, char **argv) {</description></item><item><title>驱动模型</title><link>https://mengdemao.github.io/drivermodel/</link><pubDate>Fri, 01 Oct 2021 23:32:46 +0800</pubDate><author><name>mengdemao</name></author><guid>https://mengdemao.github.io/drivermodel/</guid><description>1 简述 驱动模型 顶级kobject 解释 block 块设备链接&amp;ndash;&amp;gt;/sys/deives相关文件 bus 存放各种总线文件 class 各种设备类 dev 存放(字</description></item><item><title>Engineering_compiler</title><link>https://mengdemao.github.io/engineering_compiler/</link><pubDate>Sun, 03 Oct 2021 12:42:43 +0800</pubDate><author><name>mengdemao</name></author><guid>https://mengdemao.github.io/engineering_compiler/</guid><description></description></item><item><title>Doxygen</title><link>https://mengdemao.github.io/doxygen/</link><pubDate>Sun, 03 Oct 2021 12:58:02 +0800</pubDate><author><name>mengdemao</name></author><guid>https://mengdemao.github.io/doxygen/</guid><description>doxygen教程 1 开始</description></item><item><title>C++笔记</title><link>https://mengdemao.github.io/cxx_basic/</link><pubDate>Sun, 03 Oct 2021 13:20:54 +0800</pubDate><author><name>mengdemao</name></author><guid>https://mengdemao.github.io/cxx_basic/</guid><description><![CDATA[1 C++基础语法 1.1 第一个程序 1 2 3 4 5 6 7 8 9 #include &lt;iostream&gt; using namespace std; int main(int argc, char *argv[]) { cout &lt;&lt; &#34;Hello World&#34; &lt;&lt; endl; return 0; } 1.2 注释类型 单行注释 1 // 这个是一个单行注释 多行注释 1 2 3]]></description></item><item><title>Rust</title><link>https://mengdemao.github.io/rust/</link><pubDate>Sun, 03 Oct 2021 13:21:15 +0800</pubDate><author><name>mengdemao</name></author><guid>https://mengdemao.github.io/rust/</guid><description>RUST学习笔记 ==== 1 安装 添加环境变量.bashrc/profile 1 2 set RUSTUP_DIST_SERVER=https://mirrors.ustc.edu.cn/rust-static set RUSTUP_UPDATE_ROOT=https://mirrors.ustc.edu.cn/rust-static/rustup 安装工具链 1 curl https://mirrors.ustc.edu.cn/rust-static/rustup/rustup-init.sh | sh 设置rust的环境变量.bashrc/pr</description></item><item><title>Conda</title><link>https://mengdemao.github.io/conda/</link><pubDate>Sun, 03 Oct 2021 14:01:35 +0800</pubDate><author><name>mengdemao</name></author><guid>https://mengdemao.github.io/conda/</guid><description></description></item><item><title>Jupyter</title><link>https://mengdemao.github.io/jupyter/</link><pubDate>Sun, 03 Oct 2021 14:01:51 +0800</pubDate><author><name>mengdemao</name></author><guid>https://mengdemao.github.io/jupyter/</guid><description>jupyter 1 安装 1 conda install jupyter 2 基本配置 2.1 生成配置 1 jupyter notebook --generate-config 自动生成配置文件 ~/.jupyter/jupyter_notebook_config.py 2.2 设置密码 1 jupyter notebook password 2.3</description></item><item><title>Wasm</title><link>https://mengdemao.github.io/wasm/</link><pubDate>Sun, 03 Oct 2021 17:20:41 +0800</pubDate><author><name>mengdemao</name></author><guid>https://mengdemao.github.io/wasm/</guid><description>WASM笔记</description></item><item><title>Rime</title><link>https://mengdemao.github.io/rime/</link><pubDate>Sun, 03 Oct 2021 17:52:22 +0800</pubDate><author><name>mengdemao</name></author><guid>https://mengdemao.github.io/rime/</guid><description></description></item><item><title>系统调度</title><link>https://mengdemao.github.io/sched/</link><pubDate>Mon, 04 Oct 2021 12:10:25 +0800</pubDate><author><name>mengdemao</name></author><guid>https://mengdemao.github.io/sched/</guid><description>系统调度 主调度器schedule 周期调度器scheduler_tick 1 周期调度器函数实现 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 void scheduler_tick(void) { int cpu = smp_processor_id(); // CPUID struct</description></item><item><title>任务管理</title><link>https://mengdemao.github.io/task/</link><pubDate>Mon, 04 Oct 2021 12:11:27 +0800</pubDate><author><name>mengdemao</name></author><guid>https://mengdemao.github.io/task/</guid><description></description></item><item><title>Fork</title><link>https://mengdemao.github.io/fork/</link><pubDate>Mon, 04 Oct 2021 12:11:31 +0800</pubDate><author><name>mengdemao</name></author><guid>https://mengdemao.github.io/fork/</guid><description><![CDATA[fork linux创建线程的函数 fork &ndash;&gt; do_fork do_fork的执行线路 do_fork &ndash;&gt; copy_process &ndash;&gt; get_task_pid &ndash;&gt; wake_up_new_task &ndash;&gt; put_pid do_fork函数原型 1 2 3 4 5 6 long _do_fork(unsigned long clone_flags, unsigned long stack_start, unsigned long stack_size, int __user *parent_tidptr, int __user *child_tidptr,]]></description></item><item><title>Page</title><link>https://mengdemao.github.io/page/</link><pubDate>Mon, 04 Oct 2021 12:13:02 +0800</pubDate><author><name>mengdemao</name></author><guid>https://mengdemao.github.io/page/</guid><description></description></item><item><title>Mmu</title><link>https://mengdemao.github.io/mmu/</link><pubDate>Mon, 04 Oct 2021 12:14:30 +0800</pubDate><author><name>mengdemao</name></author><guid>https://mengdemao.github.io/mmu/</guid><description>MMU内存管理单元 ARM内存管理单元分析</description></item><item><title>Slab</title><link>https://mengdemao.github.io/slab/</link><pubDate>Mon, 04 Oct 2021 12:15:04 +0800</pubDate><author><name>mengdemao</name></author><guid>https://mengdemao.github.io/slab/</guid><description></description></item><item><title>输入子系统</title><link>https://mengdemao.github.io/input_drive/</link><pubDate>Tue, 05 Oct 2021 21:14:34 +0800</pubDate><author><name>mengdemao</name></author><guid>https://mengdemao.github.io/input_drive/</guid><description>输入子设备分为三层 handle core device 1 input的相关结构体 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46</description></item><item><title>Python学习笔记</title><link>https://mengdemao.github.io/python/</link><pubDate>Tue, 05 Oct 2021 21:22:39 +0800</pubDate><author><name>mengdemao</name></author><guid>https://mengdemao.github.io/python/</guid><description><![CDATA[1 HelloWorld 1 2 3 4 #!/bin/python3 if __name__ == &#39;__main__&#39;: print(&#39;Hello World&#39;) 2 数据类型 2.1 Numbers(数字) 1 2 intA = 10 print(intA) 2.2 布尔类型 1 2 true false 2.2.1 String(字符串) 1 2 strB = &#34;Hello&#34; print(strB) 2.3 List(列]]></description></item><item><title>STL学习笔记</title><link>https://mengdemao.github.io/stl/</link><pubDate>Wed, 06 Oct 2021 11:24:07 +0800</pubDate><author><name>mengdemao</name></author><guid>https://mengdemao.github.io/stl/</guid><description>STL称为标准模板库(Standard Template Library) 广义上可以分为容器,算法,迭代器 容器和算法通过迭代器进行无缝连接 STL几乎所有的代码都采用了函数模</description></item><item><title>Sds</title><link>https://mengdemao.github.io/sds/</link><pubDate>Wed, 06 Oct 2021 12:56:03 +0800</pubDate><author><name>mengdemao</name></author><guid>https://mengdemao.github.io/sds/</guid><description>A C dynamic strings library C语言版本动态字符串库 1 SDSSDS的类型就是 1 typedef char *sds; 可以明显的看到,sds就是普通的char类型 1.1 下面是sds的数据类型 1 2 3 4</description></item><item><title>Html5</title><link>https://mengdemao.github.io/html5/</link><pubDate>Thu, 07 Oct 2021 11:51:59 +0800</pubDate><author><name>mengdemao</name></author><guid>https://mengdemao.github.io/html5/</guid><description><![CDATA[1 开始网页基础结构 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 &lt;!-- 告诉浏览器,需要使用的规范 --&gt; &lt;!DOCTYPE html&gt; &lt;html lang=&#34;en&#34;&gt; &lt;!-- 网页标题 --&gt; &lt;head&gt; &lt;!-- 描述标签 --&gt; &lt;meta charset=&#34;UTF-8&#34;&gt; &lt;!-- 网页标题 --&gt; &lt;title&gt;Document&lt;/title&gt; &lt;/head&gt; &lt;!-- 网]]></description></item><item><title>Css</title><link>https://mengdemao.github.io/css/</link><pubDate>Thu, 07 Oct 2021 11:52:18 +0800</pubDate><author><name>mengdemao</name></author><guid>https://mengdemao.github.io/css/</guid><description>1 CSS开始(层叠样式表)HTML + CSS + JavaScript 名词 + 形容词 + 动词 相当于对原始的HTML进行美化 1.1 快速入门 CSS是什么 CSS怎么用 CSS选择器 美化</description></item><item><title>Javascript</title><link>https://mengdemao.github.io/javascript/</link><pubDate>Thu, 07 Oct 2021 11:52:24 +0800</pubDate><author><name>mengdemao</name></author><guid>https://mengdemao.github.io/javascript/</guid><description></description></item><item><title>Tkinter</title><link>https://mengdemao.github.io/tkinter/</link><pubDate>Sat, 16 Oct 2021 20:13:10 +0800</pubDate><author><name>mengdemao</name></author><guid>https://mengdemao.github.io/tkinter/</guid><description>python基础绘图</description></item><item><title>Fair</title><link>https://mengdemao.github.io/fair/</link><pubDate>Thu, 28 Oct 2021 07:40:31 +0800</pubDate><author><name>mengdemao</name></author><guid>https://mengdemao.github.io/fair/</guid><description>完全公平调度器 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 const struct sched_class fair_sched_class = { .next = &amp;amp;idle_sched_class, .enqueue_task = enqueue_task_fair, .dequeue_task = dequeue_task_fair, .yield_task = yield_task_fair, .yield_to_task = yield_to_task_fair, .check_preempt_curr = check_preempt_wakeup,</description></item><item><title>Idle</title><link>https://mengdemao.github.io/idle/</link><pubDate>Thu, 28 Oct 2021 07:40:38 +0800</pubDate><author><name>mengdemao</name></author><guid>https://mengdemao.github.io/idle/</guid><description>IDLE调度器类 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62</description></item><item><title>Arm</title><link>https://mengdemao.github.io/arm/</link><pubDate>Sat, 30 Oct 2021 10:37:25 +0800</pubDate><author><name>mengdemao</name></author><guid>https://mengdemao.github.io/arm/</guid><description>ARM笔记 1 ARM体系结构 1.1 相关术语 流水线 DSP Jazelle ThumbEE Thumb-2 TrustZone VFP NEON LAPE big.LITTLE 1.2 工具链 文件名 详解 addr2line 把程序地址转化为文件名和行号 ar 建立、修改和提取归档文件 as 汇编</description></item><item><title>Bsdiff</title><link>https://mengdemao.github.io/bsdiff/</link><pubDate>Sat, 30 Oct 2021 17:24:30 +0800</pubDate><author><name>mengdemao</name></author><guid>https://mengdemao.github.io/bsdiff/</guid><description>bsdiff bsdiff and bspatch are tools for building and applying patches to binary files. By using suffix &amp;gt; sorting (specifically, Larsson and Sadakane&amp;rsquo;s qsufsort) and taking advantage of how executable files change, bsdiff routinely produces binary patches 50-80% smaller than those produced by Xdelta, and 15% smaller than those produced by .RTPatch (a $2750/seat commercial patch tool) &amp;ndash; 直接摘抄自官网 详情可以查</description></item><item><title>Server</title><link>https://mengdemao.github.io/server/</link><pubDate>Fri, 05 Nov 2021 23:22:16 +0800</pubDate><author><name>mengdemao</name></author><guid>https://mengdemao.github.io/server/</guid><description>个人服务器安装记录 1 配置交换文件 1 2 3 4 5 6 7 8 9 10 11 12 13 14 # 创建交换文件 sudo fallocate -l 2G /swapfile # 修改权限只允许ROOT使用 sudo chmod 600 /swapfile # 创建swapfil</description></item><item><title>Tinycc</title><link>https://mengdemao.github.io/tinycc/</link><pubDate>Sun, 07 Nov 2021 12:10:56 +0800</pubDate><author><name>mengdemao</name></author><guid>https://mengdemao.github.io/tinycc/</guid><description>TinyCC TinyCC (aka TCC) is a small but hyper fast C compiler. Unlike other C compilers, it is meant to be self-relying: you do not need an external assembler or linker because TCC does that for you. 1 TCC 执行概览TCC组成代码 文件名 解释 tcc.c/libtcc.c tcc运行代码 tccpp.c tccelf.c tcccoff.c tccasm.c tccrun.c tccgen.c x86_64-gen.c</description></item><item><title>dwl</title><link>https://mengdemao.github.io/dwl/</link><pubDate>Sun, 07 Nov 2021 15:17:05 +0800</pubDate><author><name>mengdemao</name></author><guid>https://mengdemao.github.io/dwl/</guid><description>dwl桌面环境 1 编译流程 2 setup 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56</description></item><item><title>调度优先级</title><link>https://mengdemao.github.io/schedulepriority/</link><pubDate>Sun, 14 Nov 2021 12:47:03 +0800</pubDate><author><name>mengdemao</name></author><guid>https://mengdemao.github.io/schedulepriority/</guid><description>1 优先级定义 内核优先级使用0-139确定内部优先级,0-99分配实时进程; [100, 139]分配非实时进程,nice的映射[-20, 19]与非实时优</description></item><item><title>Complete</title><link>https://mengdemao.github.io/complete/</link><pubDate>Sat, 11 Dec 2021 17:02:49 +0800</pubDate><author><name>mengdemao</name></author><guid>https://mengdemao.github.io/complete/</guid><description></description></item><item><title>Lua</title><link>https://mengdemao.github.io/lua/</link><pubDate>Sun, 02 Jan 2022 00:23:06 +0800</pubDate><author><name>mengdemao</name></author><guid>https://mengdemao.github.io/lua/</guid><description>Lua源码分析 Lua运行结构 1 相关数据结构 1.1 全局状态机 描述Lua运行状态,同时可以产生一种面向对象的模拟 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18</description></item><item><title>C4</title><link>https://mengdemao.github.io/c4/</link><pubDate>Sun, 16 Jan 2022 21:54:00 +0800</pubDate><author><name>mengdemao</name></author><guid>https://mengdemao.github.io/c4/</guid><description>1 C4实现C4共实现了4个函数 1 2 3 4 void stmt(); void next(); void expr(int lev); int main(int argc, char **argv); 1.1 全局数据 1.1.1 全局变量 1 2 3 4 5 6 7 8 9 10 11 12 13 char *p, *lp, // current position in source code *data; // data/bss pointer int *e, *le,</description></item><item><title>Buildroot</title><link>https://mengdemao.github.io/buildroot/</link><pubDate>Sun, 13 Mar 2022 08:29:42 +0800</pubDate><author><name>mengdemao</name></author><guid>https://mengdemao.github.io/buildroot/</guid><description>1 下载buildroot 1 2 3 git clone --depth=1 https://git.busybox.net/buildroot git branch -a [new branch] git checkout [new branch] 2 快速开始 可以先找到一个类似的配置文件,配置文件在下载的根目录的configs文件夹</description></item><item><title>内存管理</title><link>https://mengdemao.github.io/memory_management/</link><pubDate>Sun, 13 Mar 2022 18:05:24 +0800</pubDate><author><name>mengdemao</name></author><guid>https://mengdemao.github.io/memory_management/</guid><description>1 ZONE 1.1 ZONE类型 ZONE_DMA, ZONE_DMA32 ZONE_NORMAL ZONE_HIGHMEM ZONE_MOVABLE ZONE_DEVICE</description></item><item><title>pthread源码分析</title><link>https://mengdemao.github.io/pthread/</link><pubDate>Sun, 01 May 2022 10:37:25 +0800</pubDate><author><name>mengdemao</name></author><guid>https://mengdemao.github.io/pthread/</guid><description>pthread源码分析 基于musl源码库与glibc库,其中musl提供分析的思路,glibc分析具体实现 1 pthread句柄 1 2 3 4 5 6 7</description></item><item><title>C++模板</title><link>https://mengdemao.github.io/cxx_template/</link><pubDate>Sat, 18 Jun 2022 14:21:30 +0800</pubDate><author><name>mengdemao</name></author><guid>https://mengdemao.github.io/cxx_template/</guid><description>&lt;div class="featured-image">
&lt;img src="/featuredImage/01.png" referrerpolicy="no-referrer">
&lt;/div>1 相关知识gcc中typeof关键字用来检查变量类型,那么则可以用来判断魔板生成中的数据类型, 但是在C++中存在这另外的运算符typeid,</description></item></channel></rss>