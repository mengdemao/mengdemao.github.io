<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title>所有文章 - 编程日志</title><link>/posts/</link><description>所有文章 | 编程日志</description><generator>Hugo -- gohugo.io</generator><copyright>Copyright © 2020-{year} Meng Demao. All Rights Reserved.</copyright><lastBuildDate>Sat, 18 Jun 2022 14:21:30 +0800</lastBuildDate><atom:link href="/posts/" rel="self" type="application/rss+xml"/><item><title>C++模板</title><link>/posts/cxx_template/</link><pubDate>Sat, 18 Jun 2022 14:21:30 +0800</pubDate><author>mengdemao</author><guid>/posts/cxx_template/</guid><description>模板基础 模板和宏定义区别:模板在编译期进行 建立通用的模板,提高复用； C++提供两种模版机制:函数模版和类模板 函数模版 1template &amp;lt;typename T&amp;gt; 2函数声明和定义 template</description></item><item><title>pthread源码分析</title><link>/posts/pthread/</link><pubDate>Sun, 01 May 2022 10:37:25 +0800</pubDate><author>mengdemao</author><guid>/posts/pthread/</guid><description>pthread源码分析 基于musl源码库与glibc库,其中musl提供分析的思路,glibc分析具体实现 pthread句柄 1/// musl实现 2struct</description></item><item><title>内存管理</title><link>/posts/memory_management/</link><pubDate>Sun, 13 Mar 2022 18:05:24 +0800</pubDate><author>mengdemao</author><guid>/posts/memory_management/</guid><description>ZONE ZONE类型 ZONE_DMA, ZONE_DMA32 ZONE_NORMAL ZONE_HIGHMEM ZONE_MOVABLE ZONE_DEVICE</description></item><item><title>Buildroot</title><link>/posts/buildroot/</link><pubDate>Sun, 13 Mar 2022 08:29:42 +0800</pubDate><author>mengdemao</author><guid>/posts/buildroot/</guid><description>下载buildroot 1git clone --depth=1 https://git.busybox.net/buildroot 2git branch -a [new branch] 3git checkout [new branch] 快速开始 可以先找到一个类似的配置文件,配置文件在下载的根目录的configs文件夹,下面 复制</description></item><item><title>C4</title><link>/posts/c4/</link><pubDate>Sun, 16 Jan 2022 21:54:00 +0800</pubDate><author>mengdemao</author><guid>/posts/c4/</guid><description>C4实现 C4共实现了4个函数 1void stmt(); 2void next(); 3void expr(int lev); 4int main(int argc, char **argv); 全局数据 全局变量 1char *p, *lp, // current position in source code 2 *data; // data/bss pointer 3 4int *e, *le, // current position in emitted code 5 *id, // currently parsed identifier 6 *sym, // symbol table (simple</description></item><item><title>Lua</title><link>/posts/lua/</link><pubDate>Sun, 02 Jan 2022 00:23:06 +0800</pubDate><author>mengdemao</author><guid>/posts/lua/</guid><description>Lua源码分析 Lua运行结构 相关数据结构 全局状态机 描述Lua运行状态,同时可以产生一种面向对象的模拟 1struct lua_State { 2 CommonHeader; 3 lu_byte status; 4 lu_byte allowhook; 5 unsigned short nci; /* number of items in</description></item><item><title>Complete</title><link>/posts/complete/</link><pubDate>Sat, 11 Dec 2021 17:02:49 +0800</pubDate><author>mengdemao</author><guid>/posts/complete/</guid><description></description></item><item><title>调度优先级</title><link>/posts/schedulepriority/</link><pubDate>Sun, 14 Nov 2021 12:47:03 +0800</pubDate><author>mengdemao</author><guid>/posts/schedulepriority/</guid><description>优先级定义 内核优先级使用0-139确定内部优先级,0-99分配实时进程; [100, 139]分配非实时进程,nice的映射[-20, 19]与非实时优先</description></item><item><title>dwl</title><link>/posts/dwl/</link><pubDate>Sun, 07 Nov 2021 15:17:05 +0800</pubDate><author>mengdemao</author><guid>/posts/dwl/</guid><description>dwl桌面环境 编译流程 setup 1void 2setup(void) 3{ 4 /* The Wayland display is managed by libwayland. It handles accepting 5 * clients from the Unix socket, manging Wayland globals, and so on. */ 6 dpy = wl_display_create(); 7 8 /* Set up signal handlers */ 9 sigchld(0); 10 signal(SIGINT, quitsignal); 11 signal(SIGTERM, quitsignal); 12 13 /* The backend is a wlroots feature</description></item><item><title>Tinycc</title><link>/posts/tinycc/</link><pubDate>Sun, 07 Nov 2021 12:10:56 +0800</pubDate><author>mengdemao</author><guid>/posts/tinycc/</guid><description>TinyCC TinyCC (aka TCC) is a small but hyper fast C compiler. Unlike other C compilers, it is meant to be self-relying: you do not need an external assembler or linker because TCC does that for you. TCC 执行概览 TCC组成代码 文件名 解释 tcc.c/libtcc.c tcc运行代码 tccpp.c tccelf.c tcccoff.c tccasm.c tccrun.c tccgen.c x86_64-gen.c x86_64-link.c</description></item></channel></rss>