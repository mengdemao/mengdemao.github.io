<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title>编程日志</title><link>https://mengdemao.github.io/</link><description>个人知识的总结、提高、归纳</description><generator>Hugo -- gohugo.io</generator><language>zh-CN</language><managingEditor>mengdemao19951021@163.com (mengdemao)</managingEditor><webMaster>mengdemao19951021@163.com (mengdemao)</webMaster><copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright><lastBuildDate>Sat, 18 Jun 2022 14:21:30 +0800</lastBuildDate><atom:link href="https://mengdemao.github.io/index.xml" rel="self" type="application/rss+xml"/><item><title>C++模板</title><link>https://mengdemao.github.io/cxx_template/</link><pubDate>Sat, 18 Jun 2022 14:21:30 +0800</pubDate><author><name>mengdemao</name></author><guid>https://mengdemao.github.io/cxx_template/</guid><description>&lt;div class="featured-image">
&lt;img src="/featuredImage/01.png" referrerpolicy="no-referrer">
&lt;/div>1 模板基础 模板和宏定义区别:模板在编译期进行,宏在预编译期间进行 建立通用的模板,提高复用率 C++提供两种模版机制:函数模版和类模板 1.1 函数模版</description></item><item><title>pthread源码分析</title><link>https://mengdemao.github.io/pthread/</link><pubDate>Sun, 01 May 2022 10:37:25 +0800</pubDate><author><name>mengdemao</name></author><guid>https://mengdemao.github.io/pthread/</guid><description>pthread源码分析 基于musl源码库与glibc库,其中musl提供分析的思路,glibc分析具体实现 1 pthread句柄 1 2 3 4 5 6 7</description></item><item><title>内存管理</title><link>https://mengdemao.github.io/memory_management/</link><pubDate>Sun, 13 Mar 2022 18:05:24 +0800</pubDate><author><name>mengdemao</name></author><guid>https://mengdemao.github.io/memory_management/</guid><description>1 ZONE 1.1 ZONE类型 ZONE_DMA, ZONE_DMA32 ZONE_NORMAL ZONE_HIGHMEM ZONE_MOVABLE ZONE_DEVICE</description></item><item><title>Buildroot</title><link>https://mengdemao.github.io/buildroot/</link><pubDate>Sun, 13 Mar 2022 08:29:42 +0800</pubDate><author><name>mengdemao</name></author><guid>https://mengdemao.github.io/buildroot/</guid><description>1 下载buildroot 1 2 3 git clone --depth=1 https://git.busybox.net/buildroot git branch -a [new branch] git checkout [new branch] 2 快速开始 可以先找到一个类似的配置文件,配置文件在下载的根目录的configs文件夹</description></item><item><title>C4</title><link>https://mengdemao.github.io/c4/</link><pubDate>Sun, 16 Jan 2022 21:54:00 +0800</pubDate><author><name>mengdemao</name></author><guid>https://mengdemao.github.io/c4/</guid><description>1 C4实现C4共实现了4个函数 1 2 3 4 void stmt(); void next(); void expr(int lev); int main(int argc, char **argv); 1.1 全局数据 1.1.1 全局变量 1 2 3 4 5 6 7 8 9 10 11 12 13 char *p, *lp, // current position in source code *data; // data/bss pointer int *e, *le,</description></item><item><title>Lua</title><link>https://mengdemao.github.io/lua/</link><pubDate>Sun, 02 Jan 2022 00:23:06 +0800</pubDate><author><name>mengdemao</name></author><guid>https://mengdemao.github.io/lua/</guid><description>Lua源码分析 Lua运行结构 1 相关数据结构 1.1 全局状态机 描述Lua运行状态,同时可以产生一种面向对象的模拟 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18</description></item><item><title>Complete</title><link>https://mengdemao.github.io/complete/</link><pubDate>Sat, 11 Dec 2021 17:02:49 +0800</pubDate><author><name>mengdemao</name></author><guid>https://mengdemao.github.io/complete/</guid><description></description></item><item><title>调度优先级</title><link>https://mengdemao.github.io/schedulepriority/</link><pubDate>Sun, 14 Nov 2021 12:47:03 +0800</pubDate><author><name>mengdemao</name></author><guid>https://mengdemao.github.io/schedulepriority/</guid><description>1 优先级定义 内核优先级使用0-139确定内部优先级,0-99分配实时进程; [100, 139]分配非实时进程,nice的映射[-20, 19]与非实时优</description></item><item><title>dwl</title><link>https://mengdemao.github.io/dwl/</link><pubDate>Sun, 07 Nov 2021 15:17:05 +0800</pubDate><author><name>mengdemao</name></author><guid>https://mengdemao.github.io/dwl/</guid><description>dwl桌面环境 1 编译流程 2 setup 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56</description></item><item><title>Tinycc</title><link>https://mengdemao.github.io/tinycc/</link><pubDate>Sun, 07 Nov 2021 12:10:56 +0800</pubDate><author><name>mengdemao</name></author><guid>https://mengdemao.github.io/tinycc/</guid><description>TinyCC TinyCC (aka TCC) is a small but hyper fast C compiler. Unlike other C compilers, it is meant to be self-relying: you do not need an external assembler or linker because TCC does that for you. 1 TCC 执行概览TCC组成代码 文件名 解释 tcc.c/libtcc.c tcc运行代码 tccpp.c tccelf.c tcccoff.c tccasm.c tccrun.c tccgen.c x86_64-gen.c</description></item></channel></rss>