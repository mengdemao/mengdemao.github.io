<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>编程日志</title>
    <link>https://mengdemao.github.io/</link>
    <description>Recent content on 编程日志</description>
    <generator>Hugo -- gohugo.io</generator>
    <copyright>Copyright © 2020-{year} Meng Demao. All Rights Reserved.</copyright>
    <lastBuildDate>Thu, 28 Oct 2021 07:40:38 +0800</lastBuildDate><atom:link href="https://mengdemao.github.io/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Idle</title>
      <link>https://mengdemao.github.io/posts/idle/</link>
      <pubDate>Thu, 28 Oct 2021 07:40:38 +0800</pubDate>
      
      <guid>https://mengdemao.github.io/posts/idle/</guid>
      <description>IDLE调度器类 1/* 2* Generic entry points for the idle threads and 3* implementation of the idle task scheduling class. 4* 5* (NOTE: these are not related to SCHED_IDLE batch scheduled 6* tasks which are handled in sched/fair.c ) 7*/ 8#include &amp;#34;sched.h&amp;#34;9 10#include &amp;lt;trace/events/power.h&amp;gt;11 12/* Linker adds these: start and end of __cpuidle functions */ 13extern char __cpuidle_text_start[], __cpuidle_text_end[]; 14 15/** 16* sched_idle_set_state -</description>
    </item>
    
    <item>
      <title>Fair</title>
      <link>https://mengdemao.github.io/posts/fair/</link>
      <pubDate>Thu, 28 Oct 2021 07:40:31 +0800</pubDate>
      
      <guid>https://mengdemao.github.io/posts/fair/</guid>
      <description>1// SPDX-License-Identifier: GPL-2.0 2/* 3* Completely Fair Scheduling (CFS) Class (SCHED_NORMAL/SCHED_BATCH) 4* 5* Copyright (C) 2007 Red Hat, Inc., Ingo Molnar &amp;lt;mingo@redhat.com&amp;gt; 6* 7* Interactivity improvements by Mike Galbraith 8* (C) 2007 Mike Galbraith &amp;lt;efault@gmx.de&amp;gt; 9* 10* Various enhancements by Dmitry Adamushko. 11* (C) 2007 Dmitry Adamushko &amp;lt;dmitry.adamushko@gmail.com&amp;gt; 12* 13* Group scheduling enhancements by Srivatsa Vaddagiri 14* Copyright IBM Corporation, 2007 15* Author: Srivatsa Vaddagiri &amp;lt;vatsa@linux.vnet.ibm.com&amp;gt; 16* 17* Scaled math optimizations by Thomas Gleixner 18* Copyright (C) 2007, Thomas Gleixner &amp;lt;tglx@linutronix.</description>
    </item>
    
    <item>
      <title>Tkinter</title>
      <link>https://mengdemao.github.io/posts/tkinter/</link>
      <pubDate>Sat, 16 Oct 2021 20:13:10 +0800</pubDate>
      
      <guid>https://mengdemao.github.io/posts/tkinter/</guid>
      <description>python基础绘图</description>
    </item>
    
    <item>
      <title>Javascript</title>
      <link>https://mengdemao.github.io/posts/javascript/</link>
      <pubDate>Thu, 07 Oct 2021 11:52:24 +0800</pubDate>
      
      <guid>https://mengdemao.github.io/posts/javascript/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Css</title>
      <link>https://mengdemao.github.io/posts/css/</link>
      <pubDate>Thu, 07 Oct 2021 11:52:18 +0800</pubDate>
      
      <guid>https://mengdemao.github.io/posts/css/</guid>
      <description>CSS开始(层叠样式表) HTML + CSS + JavaScript 名词 + 形容词 + 动词 相当于对原始的HTML进行美化 快速入门 CSS是什么 CSS怎么用 CSS选择器 美化网页 盒子模</description>
    </item>
    
    <item>
      <title>Html5</title>
      <link>https://mengdemao.github.io/posts/html5/</link>
      <pubDate>Thu, 07 Oct 2021 11:51:59 +0800</pubDate>
      
      <guid>https://mengdemao.github.io/posts/html5/</guid>
      <description>开始 网页基础结构 1&amp;lt;!-- 告诉浏览器,需要使用的规范 --&amp;gt; 2&amp;lt;!DOCTYPE html&amp;gt; 3&amp;lt;html lang=&amp;#34;en&amp;#34;&amp;gt; 4 5&amp;lt;!-- 网页标题 --&amp;gt; 6&amp;lt;head&amp;gt; 7 &amp;lt;!-- 描述标签 --&amp;gt; 8 &amp;lt;meta charset=&amp;#34;UTF-8&amp;#34;&amp;gt; 9 10 &amp;lt;!-- 网页标题 --&amp;gt; 11 &amp;lt;title&amp;gt;Document&amp;lt;/title&amp;gt; 12&amp;lt;/head&amp;gt; 13 14&amp;lt;!-- 网页主体 --&amp;gt; 15&amp;lt;body&amp;gt; 16&amp;lt;/body&amp;gt; 17&amp;lt;/html&amp;gt; 网页基本</description>
    </item>
    
    <item>
      <title>Sds</title>
      <link>https://mengdemao.github.io/posts/sds/</link>
      <pubDate>Wed, 06 Oct 2021 12:56:03 +0800</pubDate>
      
      <guid>https://mengdemao.github.io/posts/sds/</guid>
      <description>A C dynamic strings library C语言版本动态字符串库 SDS SDS的类型就是 1typedef char *sds; 可以明显的看到,sds就是普通的char类型 下面是sds的数据类型 1+--------+-------------------------------+-----------+ 2| Header | Binary safe C alike string...</description>
    </item>
    
    <item>
      <title>STL学习笔记</title>
      <link>https://mengdemao.github.io/posts/stl/</link>
      <pubDate>Wed, 06 Oct 2021 11:24:07 +0800</pubDate>
      
      <guid>https://mengdemao.github.io/posts/stl/</guid>
      <description>STL称为标准模板库(Standard Template Library) 广义上可以分为容器,算法,迭代器 容器和算法通过迭代器进行无缝连接 STL几乎所有的代码都采用了函数模</description>
    </item>
    
    <item>
      <title>Python学习笔记</title>
      <link>https://mengdemao.github.io/posts/python/</link>
      <pubDate>Tue, 05 Oct 2021 21:22:39 +0800</pubDate>
      
      <guid>https://mengdemao.github.io/posts/python/</guid>
      <description>HelloWorld 1#!/bin/python3 2 3if __name__ == &amp;#39;__main__&amp;#39;: 4 print(&amp;#39;Hello World&amp;#39;) 数据类型 Numbers(数字) 1intA = 10 2print(intA) 布尔类型 1true 2false String(字符串) 1strB = &amp;#34;Hello&amp;#34; 2print(strB) List(列表) 1listC = [&amp;#34;12&amp;#34;, 3, 4] 2print(listC) Tuple(</description>
    </item>
    
    <item>
      <title>输入子系统</title>
      <link>https://mengdemao.github.io/posts/input_drive/</link>
      <pubDate>Tue, 05 Oct 2021 21:14:34 +0800</pubDate>
      
      <guid>https://mengdemao.github.io/posts/input_drive/</guid>
      <description>输入子设备分为三层 handle core device input的相关结构体 1 struct input_dev { /* 输入设备的描述 */ 2 const char *name; /* 设备名称 */ 3 const char *phys; 4 const char *uniq; 5 struct input_id id; 6 7 unsigned long propbit[BITS_TO_LONGS(INPUT_PROP_CNT)]; 8 9 unsigned long evbit[BITS_TO_LONGS(EV_CNT)]; 10 unsigned</description>
    </item>
    
    <item>
      <title>Slab</title>
      <link>https://mengdemao.github.io/posts/slab/</link>
      <pubDate>Mon, 04 Oct 2021 12:15:04 +0800</pubDate>
      
      <guid>https://mengdemao.github.io/posts/slab/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Mmu</title>
      <link>https://mengdemao.github.io/posts/mmu/</link>
      <pubDate>Mon, 04 Oct 2021 12:14:30 +0800</pubDate>
      
      <guid>https://mengdemao.github.io/posts/mmu/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Page</title>
      <link>https://mengdemao.github.io/posts/page/</link>
      <pubDate>Mon, 04 Oct 2021 12:13:02 +0800</pubDate>
      
      <guid>https://mengdemao.github.io/posts/page/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Fork</title>
      <link>https://mengdemao.github.io/posts/fork/</link>
      <pubDate>Mon, 04 Oct 2021 12:11:31 +0800</pubDate>
      
      <guid>https://mengdemao.github.io/posts/fork/</guid>
      <description></description>
    </item>
    
    <item>
      <title>任务管理</title>
      <link>https://mengdemao.github.io/posts/task/</link>
      <pubDate>Mon, 04 Oct 2021 12:11:27 +0800</pubDate>
      
      <guid>https://mengdemao.github.io/posts/task/</guid>
      <description></description>
    </item>
    
    <item>
      <title>系统调度</title>
      <link>https://mengdemao.github.io/posts/sched/</link>
      <pubDate>Mon, 04 Oct 2021 12:10:25 +0800</pubDate>
      
      <guid>https://mengdemao.github.io/posts/sched/</guid>
      <description>系统调度 调度核心函数实现 1/* 2* kernel/sched/core.c 3* 4* Core kernel scheduler code and related syscalls 5* 6* Copyright (C) 1991-2002 Linus Torvalds 7*/ 8#include &amp;#34;sched.h&amp;#34;9 10#include &amp;lt;linux/nospec.h&amp;gt;11 12#include &amp;lt;linux/kcov.h&amp;gt;13 14#include &amp;lt;asm/switch_to.h&amp;gt;15#include &amp;lt;asm/tlb.h&amp;gt;16 17#include &amp;#34;../workqueue_internal.h&amp;#34;18#include &amp;#34;../smpboot.h&amp;#34;19 20#include &amp;#34;pelt.h&amp;#34;21 22#define CREATE_TRACE_POINTS 23#include &amp;lt;trace/events/sched.h&amp;gt;24 25DEFINE_PER_CPU_SHARED_ALIGNED(struct rq, runqueues); 26 27#ifdef CONFIG_SCHED_DEBUG 28/* 29* Debugging: various feature bits 30* 31* If SCHED_DEBUG is disabled, each compilation</description>
    </item>
    
    <item>
      <title>Rime</title>
      <link>https://mengdemao.github.io/posts/rime/</link>
      <pubDate>Sun, 03 Oct 2021 17:52:22 +0800</pubDate>
      
      <guid>https://mengdemao.github.io/posts/rime/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Wasm</title>
      <link>https://mengdemao.github.io/posts/wasm/</link>
      <pubDate>Sun, 03 Oct 2021 17:20:41 +0800</pubDate>
      
      <guid>https://mengdemao.github.io/posts/wasm/</guid>
      <description>WASM笔记</description>
    </item>
    
    <item>
      <title>Jupyter</title>
      <link>https://mengdemao.github.io/posts/jupyter/</link>
      <pubDate>Sun, 03 Oct 2021 14:01:51 +0800</pubDate>
      
      <guid>https://mengdemao.github.io/posts/jupyter/</guid>
      <description>jupyter 安装 1conda install jupyter 基本配置 生成配置 1jupyter notebook --generate-config 自动生成配置文件 ~/.jupyter/jupyter_notebook_config.py 设置密码 1jupyter notebook password</description>
    </item>
    
    <item>
      <title>Conda</title>
      <link>https://mengdemao.github.io/posts/conda/</link>
      <pubDate>Sun, 03 Oct 2021 14:01:35 +0800</pubDate>
      
      <guid>https://mengdemao.github.io/posts/conda/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Rust</title>
      <link>https://mengdemao.github.io/posts/rust/</link>
      <pubDate>Sun, 03 Oct 2021 13:21:15 +0800</pubDate>
      
      <guid>https://mengdemao.github.io/posts/rust/</guid>
      <description>RUST学习笔记 ==== 安装 添加环境变量.bashrc/profile 1set RUSTUP_DIST_SERVER=https://mirrors.ustc.edu.cn/rust-static 2set RUSTUP_UPDATE_ROOT=https://mirrors.ustc.edu.cn/rust-static/rustup 安装工具链 1curl https://mirrors.ustc.edu.cn/rust-static/rustup/rustup-init.sh | sh 设置rust的环境变量.bashrc/profil</description>
    </item>
    
    <item>
      <title>C&#43;&#43;笔记</title>
      <link>https://mengdemao.github.io/posts/c&#43;&#43;/</link>
      <pubDate>Sun, 03 Oct 2021 13:20:54 +0800</pubDate>
      
      <guid>https://mengdemao.github.io/posts/c&#43;&#43;/</guid>
      <description>C++基础语法 第一个程序 1#include &amp;lt;iostream&amp;gt;2 3using namespace std; 4 5int main(int argc, char *argv[]) 6{ 7 cout &amp;lt;&amp;lt; &amp;#34;Hello World&amp;#34; &amp;lt;&amp;lt; endl; 8 return 0; 9} 注释类型 单行注释 1// 这个是一个单行注释 多行注释 1/* 2这个里面是一个注释 3*/ 变</description>
    </item>
    
    <item>
      <title>Doxygen</title>
      <link>https://mengdemao.github.io/posts/doxygen/</link>
      <pubDate>Sun, 03 Oct 2021 12:58:02 +0800</pubDate>
      
      <guid>https://mengdemao.github.io/posts/doxygen/</guid>
      <description>doxygen教程 开始</description>
    </item>
    
    <item>
      <title>Engineering_compiler</title>
      <link>https://mengdemao.github.io/posts/engineering_compiler/</link>
      <pubDate>Sun, 03 Oct 2021 12:42:43 +0800</pubDate>
      
      <guid>https://mengdemao.github.io/posts/engineering_compiler/</guid>
      <description></description>
    </item>
    
    <item>
      <title>驱动模型</title>
      <link>https://mengdemao.github.io/posts/drivermodel/</link>
      <pubDate>Fri, 01 Oct 2021 23:32:46 +0800</pubDate>
      
      <guid>https://mengdemao.github.io/posts/drivermodel/</guid>
      <description>简述 驱动模型 顶级kobject 解释 block 块设备链接&amp;ndash;&amp;gt;/sys/deives相关文件 bus 存放各种总线文件 class 各种设备类 dev 存放(字符</description>
    </item>
    
    <item>
      <title>LuaJIT</title>
      <link>https://mengdemao.github.io/posts/luajit/</link>
      <pubDate>Sat, 04 Sep 2021 19:04:52 +0800</pubDate>
      
      <guid>https://mengdemao.github.io/posts/luajit/</guid>
      <description>LuaJIT Lua语法 基本语法 1 print(&amp;#34;Hello World&amp;#34;) 表(table) LuaJIT分析 LuaJIT主函数 1int main(int argc, char **argv) 2{ 3 int status; /* 返回值 */ 4 lua_State *L = lua_open(); /* 创建LUA状态机 */ 5 if (L</description>
    </item>
    
    <item>
      <title>编译原理</title>
      <link>https://mengdemao.github.io/posts/compilerprinciples/</link>
      <pubDate>Sat, 04 Sep 2021 19:04:52 +0800</pubDate>
      
      <guid>https://mengdemao.github.io/posts/compilerprinciples/</guid>
      <description>编译原理 基础概念 词法分析 RE NFA DFA 语法分析 上下文无关文法(CFG) 自上而下(Top Down) 自下而上(Bottom Up) 语义分析 中间代码 目标代码</description>
    </item>
    
    <item>
      <title>Page_allocator</title>
      <link>https://mengdemao.github.io/posts/page_allocator/</link>
      <pubDate>Sun, 09 May 2021 16:03:16 +0800</pubDate>
      
      <guid>https://mengdemao.github.io/posts/page_allocator/</guid>
      <description>页面分配器 核心函数: __alloc_pages_nodemask gfp_mask : 分配掩码 order : 分配阶数 preferred_nid nodemask 核心函数 1struct page *__alloc_pages_nodemask(gfp_t gfp_mask, unsigned int order, int preferred_nid, nodemask_t *nodemask) 2{ 3 struct page *page; // 分配变量 4 unsigned int alloc_flags = ALLOC_WMARK_LOW; // 分配标志 5 gfp_t alloc_mask; // 真实分配掩</description>
    </item>
    
    <item>
      <title>Linux等待队列实现</title>
      <link>https://mengdemao.github.io/posts/wait_queue/</link>
      <pubDate>Tue, 04 May 2021 23:17:55 +0000</pubDate>
      
      <guid>https://mengdemao.github.io/posts/wait_queue/</guid>
      <description>等待事件是建立在调度的基础之上的一种同步机制 使用 等待队列头 1struct __wait_queue_head { 2 wq_lock_t lock; 3 struct list_head task_list; 4}; 5typedef struct __wait_queue_head wait_queue_head_t; 等待队列实体 1struct __wait_queue { 2 unsigned int flags; 3 struct task_struct * task; 4 struct list_head task_list; 5}; 6typedef struct __wait_queue</description>
    </item>
    
    <item>
      <title>antlr教程</title>
      <link>https://mengdemao.github.io/posts/antlr/</link>
      <pubDate>Tue, 04 May 2021 22:53:09 +0800</pubDate>
      
      <guid>https://mengdemao.github.io/posts/antlr/</guid>
      <description>简介 ANTLR是一款强大的语法分析器生成工具,用于读取、处理、执行和翻译结构化的文本或二进制文件. 类似于flex/bison,根据描述文件，</description>
    </item>
    
    <item>
      <title>Hugo教程</title>
      <link>https://mengdemao.github.io/posts/hugo/</link>
      <pubDate>Tue, 04 May 2021 22:53:09 +0800</pubDate>
      
      <guid>https://mengdemao.github.io/posts/hugo/</guid>
      <description>基本操作 安装hugo 在linux/windows上只能通过直接release 下载, 创建网站 1hugo new site 路径 添加主题 将主题直接添加到theme文件下</description>
    </item>
    
    <item>
      <title>Nfs</title>
      <link>https://mengdemao.github.io/posts/nfs/</link>
      <pubDate>Mon, 03 May 2021 18:02:48 +0800</pubDate>
      
      <guid>https://mengdemao.github.io/posts/nfs/</guid>
      <description>nfs服务 安装 1sudo apt-get install nfs-kernel-server 设置导出 1/home/exports *(rw,nohide,insecure,no_subtree_check,async,no_root_squash) 开启服务 1sudo /etc/init.d/nfs-kernel-server restart 测试 1sudo mount -t nfs -o nolock,vers=3 127.0.0.1:/home/exports /mnt 2ls /mnt</description>
    </item>
    
  </channel>
</rss>
