<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title>编程日志</title><link>https://mengdemao.github.io/</link><description>个人知识的总结、提高、归纳</description><generator>Hugo -- gohugo.io</generator><language>zh-CN</language><managingEditor>mengdemao19951021@163.com (mengdemao)</managingEditor><webMaster>mengdemao19951021@163.com (mengdemao)</webMaster><copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright><lastBuildDate>Wed, 20 Jul 2022 23:16:06 +0800</lastBuildDate><atom:link href="https://mengdemao.github.io/index.xml" rel="self" type="application/rss+xml"/><item><title>宏解析组合器</title><link>https://mengdemao.github.io/mpc/</link><pubDate>Wed, 20 Jul 2022 23:16:06 +0800</pubDate><author><name>mengdemao</name></author><guid>https://mengdemao.github.io/mpc/</guid><description><![CDATA[Micro Parser Combinators源码分析 参考资料 Build You Own Lisp 1 编译运行 一个简单的计算器 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 mpc_parser_t *Expr = mpc_new(&#34;expression&#34;); mpc_parser_t *Prod = mpc_new(&#34;product&#34;); mpc_parser_t]]></description></item><item><title>线程局部存储分析</title><link>https://mengdemao.github.io/pthread_local_storage/</link><pubDate>Mon, 18 Jul 2022 21:27:25 +0800</pubDate><author><name>mengdemao</name></author><guid>https://mengdemao.github.io/pthread_local_storage/</guid><description>&lt;div class="featured-image">
&lt;img src="/featuredImage/02.jpg" referrerpolicy="no-referrer">
&lt;/div>1 前言 在Linux C/C++编程时不可避免的会遇到以下的需求,全局变量线程共享;最为典型的功能则是errno,变量 在程序的任何地方都可以访问</description></item><item><title>pthread线程同步</title><link>https://mengdemao.github.io/pthread_lock/</link><pubDate>Mon, 18 Jul 2022 21:27:24 +0800</pubDate><author><name>mengdemao</name></author><guid>https://mengdemao.github.io/pthread_lock/</guid><description>&lt;div class="featured-image">
&lt;img src="/featuredImage/02.jpg" referrerpolicy="no-referrer">
&lt;/div>1 futex实现 高级锁的实现都是与futex实现相关 Futex是Fast Userspace muTexes的缩写 常用的锁都是通过futex实现的 mutex (互斥锁) rwlock</description></item><item><title>pthread线程源码分析</title><link>https://mengdemao.github.io/pthread_thread/</link><pubDate>Mon, 18 Jul 2022 21:27:23 +0800</pubDate><author><name>mengdemao</name></author><guid>https://mengdemao.github.io/pthread_thread/</guid><description>&lt;div class="featured-image">
&lt;img src="/featuredImage/02.jpg" referrerpolicy="no-referrer">
&lt;/div>基于musl源码库与glibc库,其中musl提供分析的思路,glibc分析具体实现 1 pthread句柄 1.1 musl实现 1 2 3 4 5 6 7 8 9 10 11</description></item><item><title>编译原理</title><link>https://mengdemao.github.io/compiler_principle/</link><pubDate>Thu, 07 Jul 2022 21:44:09 +0800</pubDate><author><name>mengdemao</name></author><guid>https://mengdemao.github.io/compiler_principle/</guid><description>&lt;div class="featured-image">
&lt;img src="/featuredImage/03.jpg" referrerpolicy="no-referrer">
&lt;/div>1 词法分析 1.1 概述 词法分析是编译原理的第一个阶段,词法分析的任务是读入源程序的输入字符,生成一个个的单词,其主要的功能是为语法分析提供词法单元</description></item><item><title>C++模板基础</title><link>https://mengdemao.github.io/cxx_template_basic/</link><pubDate>Sat, 18 Jun 2022 14:21:30 +0800</pubDate><author><name>mengdemao</name></author><guid>https://mengdemao.github.io/cxx_template_basic/</guid><description>&lt;div class="featured-image">
&lt;img src="/featuredImage/01.png" referrerpolicy="no-referrer">
&lt;/div>1 相关知识gcc中typeof关键字用来检查变量类型,那么则可以用来判断魔板生成中的数据类型, 但是在C++中存在这另外的运算符typeid,</description></item><item><title>Buildroot</title><link>https://mengdemao.github.io/buildroot/</link><pubDate>Sun, 13 Mar 2022 08:29:42 +0800</pubDate><author><name>mengdemao</name></author><guid>https://mengdemao.github.io/buildroot/</guid><description>1 下载buildroot 1 2 3 git clone --depth=1 https://git.busybox.net/buildroot git branch -a [new branch] git checkout [new branch] 2 快速开始 可以先找到一个类似的配置文件,配置文件在下载的根目录的configs文件夹</description></item><item><title>Bsdiff</title><link>https://mengdemao.github.io/bsdiff/</link><pubDate>Sat, 30 Oct 2021 17:24:30 +0800</pubDate><author><name>mengdemao</name></author><guid>https://mengdemao.github.io/bsdiff/</guid><description>bsdiff bsdiff and bspatch are tools for building and applying patches to binary files. By using suffix &amp;gt; sorting (specifically, Larsson and Sadakane&amp;rsquo;s qsufsort) and taking advantage of how executable files change, bsdiff routinely produces binary patches 50-80% smaller than those produced by Xdelta, and 15% smaller than those produced by .RTPatch (a $2750/seat commercial patch tool) &amp;ndash; 直接摘抄自官网 详情可以查</description></item><item><title>完全公平调度器</title><link>https://mengdemao.github.io/fair/</link><pubDate>Thu, 28 Oct 2021 07:40:31 +0800</pubDate><author><name>mengdemao</name></author><guid>https://mengdemao.github.io/fair/</guid><description>1 调度器类分析 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 const struct sched_class fair_sched_class = { .next = &amp;amp;idle_sched_class, .enqueue_task = enqueue_task_fair, .dequeue_task = dequeue_task_fair, .yield_task = yield_task_fair, .yield_to_task = yield_to_task_fair, .check_preempt_curr = check_preempt_wakeup,</description></item><item><title>javascript基础教程</title><link>https://mengdemao.github.io/javascript/</link><pubDate>Thu, 07 Oct 2021 11:52:24 +0800</pubDate><author><name>mengdemao</name></author><guid>https://mengdemao.github.io/javascript/</guid><description>1 基础知识 JavaScript是一种运行在浏览器中的解释型的编程语言 在hugo中运行javacsript脚本,可以使用hugo的script</description></item></channel></rss>